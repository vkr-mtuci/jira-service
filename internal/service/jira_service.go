package service

import (
	"context"
	"time"

	"github.com/rs/zerolog/log"
	"github.com/vkr-mtuci/jira-service/internal/adapter"
)

// üîπ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è JiraService (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –º–æ–∫–∞—Ç—å)
type JiraServiceInterface interface {
	GetIssueDetails(issueID string) (*adapter.IssueResponse, error)
}

// JiraService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ Jira
type JiraService struct {
	client adapter.JiraClientInterface
}

// ‚úÖ –¢–µ–ø–µ—Ä—å JiraService –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ `*adapter.JiraClient`, –∞ `JiraClientInterface`
func NewJiraService(client adapter.JiraClientInterface) *JiraService {
	return &JiraService{client: client}
}

// GetIssueDetails –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –≤ Jira
func (s *JiraService) GetIssueDetails(issueID string) (*adapter.IssueResponse, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	issue, err := s.client.GetIssue(ctx, issueID)
	if err != nil {
		log.Error().Err(err).Msgf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ %s", issueID)
		return nil, err
	}

	log.Info().Msgf("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ %s", issueID)
	return issue, nil
}
