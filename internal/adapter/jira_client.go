package adapter

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-resty/resty/v2"
	"github.com/rs/zerolog/log"
	"github.com/vkr-mtuci/jira-service/config"
)

// NewJiraClient - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
func NewJiraClient(cfg *config.Config) *JiraClient {
	client := resty.New().
		SetBaseURL(cfg.JiraBaseURL).
		SetTimeout(10*time.Second).
		SetHeader("Accept", "application/json").
		SetHeader("Content-Type", "application/json").
		SetAuthToken(cfg.JiraAPIToken) // ‚úÖ Bearer Token

	log.Info().Msg("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira API: " + cfg.JiraBaseURL)

	return &JiraClient{
		client:  client,
		baseURL: cfg.JiraBaseURL,
		apiURL:  cfg.JiraAPIUrl,
	}
}

// GetIssue - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ Jira
func (j *JiraClient) GetIssue(ctx context.Context, issueID string) (*IssueResponse, error) {
	if issueID == "" {
		return nil, fmt.Errorf("‚ùå issueID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	url := fmt.Sprintf("%s%sissue/%s", j.baseURL, j.apiURL, issueID)

	log.Debug().Msgf("üì° –ó–∞–ø—Ä–æ—Å –≤ Jira: issueID=%s, URL=%s", issueID, url)

	// –ó–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ç–∞–π–º–∞—É—Ç, –æ—Ç–º–µ–Ω–∞)
	resp, err := j.client.R().
		SetContext(ctx).
		Get(url)

	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Jira")
		return nil, err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTTP-—Å—Ç–∞—Ç—É—Å—ã
	switch resp.StatusCode() {
	case http.StatusOK:
		var issue IssueResponse
		if err := json.Unmarshal(resp.Body(), &issue); err != nil {
			log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ Jira")
			return nil, err
		}
		log.Info().Msgf("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ %s", issueID)
		return &issue, nil
	case http.StatusUnauthorized:
		return nil, fmt.Errorf("‚ö†Ô∏è 401 Unauthorized: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API-—Ç–æ–∫–µ–Ω")
	case http.StatusForbidden:
		return nil, fmt.Errorf("‚ö†Ô∏è 403 Forbidden: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–µ %s", issueID)
	case http.StatusNotFound:
		return nil, fmt.Errorf("‚ö†Ô∏è 404 Not Found: –∑–∞–¥–∞—á–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", issueID)
	default:
		var jiraErr JiraErrorResponse
		_ = json.Unmarshal(resp.Body(), &jiraErr)
		return nil, fmt.Errorf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç Jira: %s", jiraErr.ErrorMessages)
	}
}
