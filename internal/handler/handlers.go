package handler

import (
	"net/http"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/rs/zerolog/log"
	"github.com/vkr-mtuci/jira-service/internal/service"
)

// JiraHandler —Ç–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏—Ç –Ω–µ –æ—Ç `JiraService`, –∞ –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ `JiraServiceInterface`
type JiraHandler struct {
	service service.JiraServiceInterface
}

// NewJiraHandler —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Jira API
func NewJiraHandler(service service.JiraServiceInterface) *JiraHandler {
	return &JiraHandler{service: service}
}

// GetIssue –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
func (h *JiraHandler) GetIssue(c *fiber.Ctx) error {
	issueID := c.Params("id")
	if issueID == "" {
		log.Warn().Msg("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω issueID")
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å issueID",
		})
	}

	issue, err := h.service.GetIssueDetails(issueID)
	if err != nil {
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
		})
	}

	return c.JSON(issue)
}

// GetMultipleIssues –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á
func (h *JiraHandler) GetMultipleIssues(c *fiber.Ctx) error {
	issueIDsQuery := c.Query("issueIDs")
	if issueIDsQuery == "" {
		log.Warn().Msg("‚ö†Ô∏è issueIDs –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω issueID",
		})
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É issueIDs –≤ –º–∞—Å—Å–∏–≤
	issueIDs := strings.Split(issueIDsQuery, ",")
	log.Info().Msgf("üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏: %v", issueIDs)

	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	var issues []interface{}
	for _, id := range issueIDs {
		issue, err := h.service.GetIssueDetails(strings.TrimSpace(id))
		if err != nil {
			log.Error().Err(err).Msgf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ %s", id)
			continue
		}
		issues = append(issues, issue)
	}

	return c.JSON(fiber.Map{
		"issues": issues,
	})
}
